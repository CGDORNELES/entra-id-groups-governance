name: PR Merge Actions

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  on-merge:
    name: Post-Merge Actions
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update documentation
        run: |
          echo "Updating documentation with latest changes..."
          # Add any documentation generation steps here

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changes from PR body or commits
          PR_BODY="${{ github.event.pull_request.body }}"
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "### Changes in PR #${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "$PR_BODY" | grep -E "^- " || echo "- ${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        uses: actions/github-script@v7
        if: github.event.pull_request && github.event.pull_request.merged == true
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if CHANGELOG.md exists
            const changelogPath = path.join(process.env.GITHUB_WORKSPACE, 'CHANGELOG.md');
            if (!fs.existsSync(changelogPath)) {
              console.log('CHANGELOG.md not found, skipping update');
              return;
            }
            
            const changelog = fs.readFileSync(changelogPath, 'utf8');
            const date = new Date().toISOString().split('T')[0];
            const newEntry = `## [Unreleased]\n\n### Added\n${{ steps.release_notes.outputs.release_notes }}\n\n`;
            const updatedChangelog = changelog.replace('## [Unreleased]', newEntry);
            fs.writeFileSync(changelogPath, updatedChangelog);

      - name: Create version tag (if needed)
        if: contains(github.event.pull_request.labels.*.name, 'release')
        run: |
          # Extract version from PR title or label
          VERSION=$(echo "${{ github.event.pull_request.title }}" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          if [ ! -z "$VERSION" ]; then
            git tag $VERSION
            git push origin $VERSION
          fi

      - name: Notify team
        uses: actions/github-script@v7
        if: github.event.pull_request
        with:
          script: |
            // Safely access pull request data
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log('No pull request data available');
              return;
            }
            
            // Post merge notification
            const issueComment = `
            ## ðŸŽ‰ PR Merged Successfully!
            
            **Merged by:** @${pr.merged_by ? pr.merged_by.login : 'unknown'}
            **Merge time:** ${pr.merged_at || new Date().toISOString()}
            
            ### Next Steps:
            - [ ] Documentation has been updated
            - [ ] CHANGELOG has been updated
            ${pr.labels && pr.labels.some(l => l.name === 'release') ? '- [ ] Version tag created' : ''}
            
            Thank you @${pr.user ? pr.user.login : 'contributor'} for your contribution! ðŸš€
            `;
            
            try {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: issueComment
              });
            } catch (error) {
              console.log(`Failed to post comment: ${error.message}`);
            }

  cleanup:
    name: PR Cleanup
    if: github.event.pull_request && github.event.pull_request.merged == false
    runs-on: ubuntu-latest

    steps:
      - name: Comment on closed PR
        uses: actions/github-script@v7
        with:
          script: |
            // Safely access pull request data
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log('No pull request data available');
              return;
            }
            
            try {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'ðŸ‘‹ This PR was closed without merging. Thank you for your contribution!'
              });
            } catch (error) {
              console.log(`Failed to post comment: ${error.message}`);
            }