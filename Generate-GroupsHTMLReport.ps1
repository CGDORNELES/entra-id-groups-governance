<#
.SYNOPSIS
    Generate an HTML report from the Entra ID groups assessment data
.DESCRIPTION
    Creates a comprehensive HTML dashboard from the CSV files generated by the assessment scripts
    Now includes group activity and usage analysis
.AUTHOR
    Created for: Clairo Dorneles (clairo@clairodorneles.cloud)
.DATE
    2025-01-13
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$AssessmentFolder,
    
    [Parameter(Mandatory=$false)]
    [string]$ActivityFolder = "",  # Optional: folder containing activity assessment results
    
    [Parameter(Mandatory=$false)]
    [string]$OutputFile = "EntraID_Groups_Report_$(Get-Date -Format 'yyyyMMdd_HHmmss').html"
)

# HTML template
$htmlTemplate = @"
<!DOCTYPE html>
<html>
<head>
    <title>Entra ID Groups Assessment Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        h1 { color: #1a1a1a; border-bottom: 3px solid #0078d4; padding-bottom: 10px; }
        h2 { color: #0078d4; margin-top: 30px; }
        h3 { color: #323130; margin-top: 20px; }
        .summary-card { background: white; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .metric { display: inline-block; margin: 10px 20px 10px 0; }
        .metric-value { font-size: 24px; font-weight: bold; color: #0078d4; }
        .metric-label { font-size: 14px; color: #666; }
        table { width: 100%; border-collapse: collapse; background: white; margin: 20px 0; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        th { background-color: #0078d4; color: white; padding: 12px; text-align: left; font-weight: normal; }
        td { padding: 10px; border-bottom: 1px solid #ddd; }
        tr:hover { background-color: #f5f5f5; }
        tr.hidden { display: none; }
        .warning { color: #ff6b00; font-weight: bold; }
        .error { color: #d13438; font-weight: bold; }
        .success { color: #107c10; font-weight: bold; }
        .footer { margin-top: 40px; padding: 20px; text-align: center; color: #666; font-size: 12px; }
        .tab-container { margin: 20px 0; }
        .tab-button { background-color: #f0f0f0; border: none; padding: 10px 20px; cursor: pointer; margin-right: 5px; border-radius: 5px 5px 0 0; }
        .tab-button.active { background-color: #0078d4; color: white; }
        .tab-content { display: none; padding: 20px; background: white; border-radius: 0 8px 8px 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .tab-content.active { display: block; }
        .badge { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; margin-left: 10px; }
        .badge-security { background-color: #107c10; color: white; }
        .badge-m365 { background-color: #5c2d91; color: white; }
        .badge-dist { background-color: #0078d4; color: white; }
        .badge-dynamic { background-color: #ff6b00; color: white; }
        .badge-privileged { background-color: #d13438; color: white; }
        .badge-active { background-color: #107c10; color: white; }
        .badge-inactive { background-color: #d13438; color: white; }
        .highlight-row { background-color: #fff4ce; }
        .inactive-row { background-color: #ffe4e6; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f8f8; padding: 15px; border-radius: 5px; border-left: 4px solid #0078d4; }
        .filter-controls { background: #f8f8f8; padding: 15px; border-radius: 5px; margin: 10px 0; display: flex; align-items: center; gap: 15px; }
        .filter-controls label { font-weight: bold; color: #323130; }
        .filter-controls select { padding: 5px 10px; border: 1px solid #ccc; border-radius: 3px; }
        .info-text { font-size: 14px; color: #666; margin-left: auto; }
        .activity-chart { margin: 20px 0; }
        .activity-bar { background: #e0e0e0; height: 30px; border-radius: 5px; position: relative; margin: 5px 0; }
        .activity-bar-fill { background: #0078d4; height: 100%; border-radius: 5px; transition: width 0.3s; }
        .activity-bar-label { position: absolute; left: 10px; top: 50%; transform: translateY(-50%); font-size: 14px; font-weight: bold; }
        .recommendation-box { background: #fff4ce; border-left: 4px solid #ff6b00; padding: 15px; margin: 10px 0; border-radius: 4px; }
        .recommendation-box h4 { margin-top: 0; color: #ff6b00; }
    </style>
    <script>
        function showTab(tabName) {
            var tabs = document.getElementsByClassName('tab-content');
            var buttons = document.getElementsByClassName('tab-button');
            
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove('active');
            }
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            
            document.getElementById(tabName).classList.add('active');
            document.getElementById('btn-' + tabName).classList.add('active');
        }
        
        function filterTable(tableId, selectId) {
            var select = document.getElementById(selectId);
            var value = select.value;
            var table = document.getElementById(tableId);
            var rows = table.getElementsByTagName('tr');
            var count = 0;
            
            // Skip header row
            for (var i = 1; i < rows.length; i++) {
                if (value === 'all') {
                    rows[i].classList.remove('hidden');
                    count++;
                } else {
                    var limit = parseInt(value);
                    if (i <= limit) {
                        rows[i].classList.remove('hidden');
                        count++;
                    } else {
                        rows[i].classList.add('hidden');
                    }
                }
            }
            
            // Update info text
            var infoId = selectId.replace('select', 'info');
            var infoElement = document.getElementById(infoId);
            if (infoElement) {
                infoElement.textContent = 'Showing ' + count + ' of ' + (rows.length - 1) + ' groups';
            }
        }
        
        window.onload = function() {
            // Initialize all filters
            var selects = document.getElementsByClassName('group-filter');
            for (var i = 0; i < selects.length; i++) {
                filterTable(selects[i].getAttribute('data-table'), selects[i].id);
            }
        }
    </script>
</head>
<body>
    <h1>Entra ID Groups Assessment Report</h1>
    <p>Generated on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p>
    
    <div class="summary-card">
        <h2>Executive Summary</h2>
        {{SUMMARY_CONTENT}}
    </div>
    
    <h2>Key Findings</h2>
    {{KEY_FINDINGS}}
    
    <h2>Detailed Reports</h2>
    
    <div class="tab-container">
        <button class="tab-button active" id="btn-overview" onclick="showTab('overview')">Overview</button>
        <button class="tab-button" id="btn-activity" onclick="showTab('activity')">Group Activity</button>
        <button class="tab-button" id="btn-m365groups" onclick="showTab('m365groups')">Microsoft 365 Groups</button>
        <button class="tab-button" id="btn-securitygroups" onclick="showTab('securitygroups')">Security Groups</button>
        <button class="tab-button" id="btn-privilegedgroups" onclick="showTab('privilegedgroups')">Privileged Groups</button>
        <button class="tab-button" id="btn-issues" onclick="showTab('issues')">Issues & Recommendations</button>
    </div>
    
    <div id="overview" class="tab-content active">
        {{OVERVIEW_CONTENT}}
    </div>
    
    <div id="activity" class="tab-content">
        {{ACTIVITY_CONTENT}}
    </div>
    
    <div id="m365groups" class="tab-content">
        {{M365_GROUPS_CONTENT}}
    </div>
    
    <div id="securitygroups" class="tab-content">
        {{SECURITY_GROUPS_CONTENT}}
    </div>
    
    <div id="privilegedgroups" class="tab-content">
        {{PRIVILEGED_GROUPS_CONTENT}}
    </div>
    
    <div id="issues" class="tab-content">
        {{ISSUES_CONTENT}}
    </div>
    
    <div class="footer">
        <p>This report was automatically generated using PowerShell and Microsoft Graph API</p>
        <p>Assessment performed by: cdornele | Report Version: 3.0</p>
    </div>
</body>
</html>
"@

try {
    Write-Host "Generating enhanced HTML report with activity analysis..." -ForegroundColor Cyan
    
    # Initialize variables
    $summaryContent = ""
    $keyFindings = ""
    $overviewContent = ""
    $activityContent = ""
    $m365GroupsContent = ""
    $securityGroupsContent = ""
    $privilegedGroupsContent = ""
    $issuesContent = ""
    
    # Read assessment summary
    $summaryPath = Join-Path $AssessmentFolder "AssessmentSummary.csv"
    if (Test-Path $summaryPath) {
        $summary = Import-Csv $summaryPath | Select-Object -First 1
        
        $summaryContent = @"
        <div class="metric">
            <div class="metric-value">$($summary.TotalGroups)</div>
            <div class="metric-label">Total Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value">$($summary.SecurityGroups)</div>
            <div class="metric-label">Security Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value">$($summary.Microsoft365Groups)</div>
            <div class="metric-label">Microsoft 365 Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value">$($summary.DynamicGroups)</div>
            <div class="metric-label">Dynamic Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value" style="color: #d13438;">$($summary.EmptyGroups)</div>
            <div class="metric-label">Empty Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value" style="color: #ff6b00;">$($summary.OrphanedGroups)</div>
            <div class="metric-label">Orphaned Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value" style="color: #107c10;">$($summary.RoleAssignableGroups)</div>
            <div class="metric-label">Role-Assignable Groups</div>
        </div>
        <div class="metric">
            <div class="metric-value">$($summary.OnPremSyncedGroups)</div>
            <div class="metric-label">Synced from On-Prem</div>
        </div>
"@
    }
    
    # Read activity assessment data if available
    $activityStats = $null
    $activitySummary = @()
    $m365Activities = @()
    $groupsRequiringAction = @()
    
    if ($ActivityFolder -and (Test-Path $ActivityFolder)) {
        $activityStatsPath = Join-Path $ActivityFolder "ActivityAssessment_Statistics.csv"
        if (Test-Path $activityStatsPath) {
            $activityStats = Import-Csv $activityStatsPath | Select-Object -First 1
        }
        
        $activitySummaryPath = Join-Path $ActivityFolder "AllGroups_ActivitySummary.csv"
        if (Test-Path $activitySummaryPath) {
            $activitySummary = Import-Csv $activitySummaryPath
        }
        
        $m365ActivitiesPath = Join-Path $ActivityFolder "M365Groups_ActivityAnalysis.csv"
        if (Test-Path $m365ActivitiesPath) {
            $m365Activities = Import-Csv $m365ActivitiesPath
        }
        
        $requireActionPath = Join-Path $ActivityFolder "Groups_RequiringAction.csv"
        if (Test-Path $requireActionPath) {
            $groupsRequiringAction = Import-Csv $requireActionPath
        }
    }
    
    # Update key findings with activity data
    $keyFindings = "<div class='summary-card'><ul>"
    
    if ($summary.EmptyGroups -gt 0) {
        $keyFindings += "<li class='error'>Found $($summary.EmptyGroups) empty groups that should be reviewed for deletion</li>"
    }
    if ($summary.OrphanedGroups -gt 0) {
        $keyFindings += "<li class='warning'>Found $($summary.OrphanedGroups) groups without owners that need ownership assignment</li>"
    }
    if ($summary.GroupsWithoutDescription -gt 0) {
        $keyFindings += "<li class='warning'>$($summary.GroupsWithoutDescription) groups lack descriptions</li>"
    }
    if ($activityStats -and $activityStats.TotalInactiveGroups -gt 0) {
        $keyFindings += "<li class='error'>$($activityStats.TotalInactiveGroups) groups ($($activityStats.PercentInactive)%) have been inactive for over $($activityStats.InactivityThresholdDays) days</li>"
    }
    if ($summary.GroupsWithGuests -gt 0) {
        $keyFindings += "<li>$($summary.GroupsWithGuests) groups contain guest users</li>"
    }
    if ($summary.RoleAssignableGroups -gt 0) {
        $keyFindings += "<li class='success'>$($summary.RoleAssignableGroups) groups are configured for role assignments</li>"
    }
    
    $keyFindings += "</ul></div>"
    
    # Read all groups data
    $allGroupsPath = Join-Path $AssessmentFolder "AllGroups_Detailed.csv"
    $allGroups = @()
    if (Test-Path $allGroupsPath) {
        $allGroups = Import-Csv $allGroupsPath
    }
    
    # OVERVIEW TAB CONTENT (Updated with activity info)
    $overviewContent = @"
    <h3>Group Distribution</h3>
    <div class="stats-grid">
        <div class="stat-card">
            <strong>Group Types</strong><br>
            Security: $($summary.SecurityGroups)<br>
            Microsoft 365: $($summary.Microsoft365Groups)<br>
            Distribution: $($summary.DistributionGroups)<br>
            Mail-Enabled Security: $($summary.MailEnabledSecurityGroups)
        </div>
        <div class="stat-card">
            <strong>Group Characteristics</strong><br>
            Dynamic Groups: $($summary.DynamicGroups)<br>
            Role-Assignable: $($summary.RoleAssignableGroups)<br>
            On-Prem Synced: $($summary.OnPremSyncedGroups)<br>
            With Guest Users: $($summary.GroupsWithGuests)
        </div>
        <div class="stat-card">
            <strong>Health Indicators</strong><br>
            Empty Groups: <span class="error">$($summary.EmptyGroups)</span><br>
            Orphaned Groups: <span class="warning">$($summary.OrphanedGroups)</span><br>
            Without Description: <span class="warning">$($summary.GroupsWithoutDescription)</span><br>
            Large Groups (>1000): $($summary.LargeGroups)
        </div>
"@

    if ($activityStats) {
        $overviewContent += @"
        <div class="stat-card">
            <strong>Activity Status</strong><br>
            Active Groups: <span class="success">$(($activityStats.ActiveM365Groups + $activityStats.ActiveSecurityGroups))</span><br>
            Inactive Groups: <span class="error">$($activityStats.TotalInactiveGroups)</span><br>
            Inactive Percentage: <span class="error">$($activityStats.PercentInactive)%</span><br>
            Threshold: $($activityStats.InactivityThresholdDays) days
        </div>
"@
    }

    $overviewContent += "</div>"
    
    # Add activity chart to overview
    if ($activityStats) {
        $activePercent = 100 - $activityStats.PercentInactive
        $overviewContent += @"
        <h3>Group Activity Overview</h3>
        <div class="activity-chart">
            <div class="activity-bar">
                <div class="activity-bar-fill" style="width: $activePercent%; background: #107c10;"></div>
                <div class="activity-bar-label">Active Groups: $activePercent%</div>
            </div>
            <div class="activity-bar">
                <div class="activity-bar-fill" style="width: $($activityStats.PercentInactive)%; background: #d13438;"></div>
                <div class="activity-bar-label">Inactive Groups: $($activityStats.PercentInactive)%</div>
            </div>
        </div>
"@
    }
    
    # Add largest groups to overview
    $largestGroups = $allGroups | Sort-Object {[int]$_.MemberCount} -Descending
    if ($largestGroups) {
        $overviewContent += @"
        <h3>Largest Groups</h3>
        <div class="filter-controls">
            <label for="select-overview-largest">Show:</label>
            <select id="select-overview-largest" class="group-filter" data-table="table-overview-largest" onchange="filterTable('table-overview-largest', 'select-overview-largest')">
                <option value="10" selected>Top 10</option>
                <option value="50">Top 50</option>
                <option value="100">Top 100</option>
                <option value="all">All</option>
            </select>
            <span id="info-overview-largest" class="info-text"></span>
        </div>
        <table id="table-overview-largest"><tr><th>Group Name</th><th>Type</th><th>Member Count</th><th>Dynamic</th><th>Created</th></tr>
"@
        foreach ($group in $largestGroups) {
            $badgeClass = switch ($group.GroupType) {
                'Security' { 'security' }
                'Microsoft 365' { 'm365' }
                default { 'dist' }
            }
            $dynamicBadge = if($group.IsDynamic -eq 'True') { '<span class="badge badge-dynamic">Dynamic</span>' } else { 'Static' }
            $overviewContent += "<tr><td>$($group.DisplayName)</td><td><span class='badge badge-$badgeClass'>$($group.GroupType)</span></td><td><strong>$($group.MemberCount)</strong></td><td>$dynamicBadge</td><td>$([datetime]::Parse($group.CreatedDateTime).ToString('yyyy-MM-dd'))</td></tr>"
        }
        $overviewContent += "</table>"
    }
    
    # ACTIVITY TAB CONTENT (New)
    $activityContent = "<h3>Group Activity Analysis</h3>"
    
    if ($activityStats) {
        $activityContent += @"
        <div class="stats-grid">
            <div class="stat-card">
                <strong>Microsoft 365 Groups</strong><br>
                Active: <span class="success">$($activityStats.ActiveM365Groups)</span><br>
                Inactive: <span class="error">$($activityStats.InactiveM365Groups)</span><br>
                Total Analyzed: $($activityStats.M365GroupsAnalyzed)
            </div>
            <div class="stat-card">
                <strong>Security Groups</strong><br>
                Recently Modified: <span class="success">$($activityStats.ActiveSecurityGroups)</span><br>
                No Recent Activity: <span class="warning">$($activityStats.InactiveSecurityGroups)</span><br>
                Total Analyzed: $($activityStats.SecurityGroupsAnalyzed)
            </div>
            <div class="stat-card">
                <strong>Assessment Summary</strong><br>
                Assessment Date: $([datetime]::Parse($activityStats.AssessmentDate).ToString('yyyy-MM-dd HH:mm'))<br>
                Inactivity Threshold: $($activityStats.InactivityThresholdDays) days<br>
                Total Groups: $($activityStats.TotalGroupsAnalyzed)
            </div>
        </div>
"@
        
        # Add groups requiring action
        if ($groupsRequiringAction) {
            $activityContent += @"
            <h3>Groups Requiring Action</h3>
            <div class="recommendation-box">
                <h4>The following groups have been inactive and should be reviewed:</h4>
                <p>Consider archiving or deleting these groups to improve governance and reduce clutter.</p>
            </div>
            <div class="filter-controls">
                <label for="select-action">Show:</label>
                <select id="select-action" class="group-filter" data-table="table-action" onchange="filterTable('table-action', 'select-action')">
                    <option value="10">Top 10</option>
                    <option value="25" selected>Top 25</option>
                    <option value="50">Top 50</option>
                    <option value="all">All</option>
                </select>
                <span id="info-action" class="info-text"></span>
            </div>
            <table id="table-action"><tr><th>Group Name</th><th>Type</th><th>Days Since Activity</th><th>Members</th><th>Status</th><th>Recommended Action</th></tr>
"@
            foreach ($group in $groupsRequiringAction) {
                $statusBadge = if($group.ActivityStatus -eq 'Inactive') { '<span class="badge badge-inactive">Inactive</span>' } else { '<span class="badge badge-active">Active</span>' }
                $activityContent += "<tr class='inactive-row'><td>$($group.GroupName)</td><td>$($group.GroupType)</td><td><strong>$($group.DaysSinceLastActivity)</strong></td><td>$($group.MemberCount)</td><td>$statusBadge</td><td>$($group.RecommendedAction)</td></tr>"
            }
            $activityContent += "</table>"
        }
        
        # Add M365 activity details
        if ($m365Activities) {
            $activeM365 = $m365Activities | Where-Object { $_.IsActive -eq 'True' } | Sort-Object {[int]$_.EmailsReceived + [int]$_.TeamsChannelMessagesCount} -Descending | Select-Object -First 20
            $inactiveM365 = $m365Activities | Where-Object { $_.IsActive -eq 'False' } | Select-Object -First 20
            
            if ($activeM365) {
                $activityContent += @"
                <h3>Most Active Microsoft 365 Groups</h3>
                <table><tr><th>Group Name</th><th>Emails</th><th>Teams Messages</th><th>Active Files</th><th>Storage (GB)</th><th>Last Activity</th></tr>
"@
                foreach ($group in $activeM365) {
                    $lastActivityDate = if($group.LastActivityDate) { [datetime]::Parse($group.LastActivityDate).ToString('yyyy-MM-dd') } else { 'N/A' }
                    $activityContent += "<tr><td>$($group.GroupDisplayName)</td><td>$($group.ExchangeReceivedEmailCount)</td><td>$($group.TeamsChannelMessagesCount)</td><td>$($group.SharePointActiveFileCount)</td><td>$($group.SharePointSiteStorageUsedGB)</td><td>$lastActivityDate</td></tr>"
                }
                $activityContent += "</table>"
            }
        }
    } else {
        $activityContent += @"
        <div class="recommendation-box">
            <h4>ℹ️ No Activity Data Available</h4>
            <p>Run the Get-GroupActivityAssessment.ps1 script to generate activity analysis data.</p>
            <p>Usage: <code>.\Get-GroupActivityAssessment.ps1</code></p>
        </div>
"@
    }
    
    # M365 GROUPS TAB CONTENT (Updated to show activity status)
    $m365Groups = $allGroups | Where-Object { $_.GroupType -eq "Microsoft 365" } | Sort-Object {[int]$_.MemberCount} -Descending
    $m365GroupsContent = "<h3>Microsoft 365 Groups Summary</h3>"
    $m365GroupsContent += "<div class='stats-grid'>"
    $m365GroupsContent += "<div class='stat-card'><strong>Total M365 Groups:</strong> $($m365Groups.Count)</div>"
    $m365GroupsContent += "<div class='stat-card'><strong>Dynamic M365 Groups:</strong> $(($m365Groups | Where-Object { $_.IsDynamic -eq 'True' }).Count)</div>"
    $m365DynamicCount = ($m365Groups | Where-Object { $_.IsDynamic -eq 'True' }).Count
    $avgMemberCount = if ($m365Groups.Count -gt 0) { [math]::Round(($m365Groups | Measure-Object -Property MemberCount -Average).Average, 2) } else { 0 }
    $m365GroupsContent += "<div class='stat-card'><strong>Average Member Count:</strong> $avgMemberCount</div>"
    
    if ($activityStats) {
        $m365GroupsContent += "<div class='stat-card'><strong>Inactive M365 Groups:</strong> <span class='error'>$($activityStats.InactiveM365Groups)</span></div>"
    }
    
    $m365GroupsContent += "</div>"
    
    if ($m365Groups) {
        $m365GroupsContent += @"
        <h3>Microsoft 365 Groups Details</h3>
        <div class="filter-controls">
            <label for="select-m365">Show:</label>
            <select id="select-m365" class="group-filter" data-table="table-m365" onchange="filterTable('table-m365', 'select-m365')">
                <option value="10">Top 10</option>
                <option value="50" selected>Top 50</option>
                <option value="100">Top 100</option>
                <option value="all">All</option>
            </select>
            <span id="info-m365" class="info-text"></span>
        </div>
        <table id="table-m365"><tr><th>Group Name</th><th>Description</th><th>Members</th><th>Owners</th><th>Dynamic</th><th>Activity</th><th>Created</th></tr>
"@
        
        foreach ($group in $m365Groups) {
            $highlightClass = if ([int]$group.MemberCount -eq 0) { "highlight-row" } else { "" }
            
            # Check if we have activity data for this group
            $activityInfo = $activitySummary | Where-Object { $_.GroupId -eq $group.Id } | Select-Object -First 1
            $activityBadge = if ($activityInfo) {
                if ($activityInfo.ActivityStatus -eq 'Active') {
                    '<span class="badge badge-active">Active</span>'
                } else {
                    '<span class="badge badge-inactive">Inactive</span>'
                }
            } else {
                'N/A'
            }
            
            $descriptionText = if($group.Description) {
                if($group.Description.Length -gt 50) {
                    "$($group.Description.Substring(0, 50))..."
                } else {
                    $group.Description
                }
            } else {
                '<span class="warning">No description</span>'
            }
            $ownerDisplay = if([int]$group.OwnerCount -eq 0) { '<span class="error">0</span>' } else { $group.OwnerCount }
            $dynamicBadge = if($group.IsDynamic -eq 'True') { '<span class="badge badge-dynamic">Dynamic</span>' } else { 'Static' }
            $m365GroupsContent += "<tr class='$highlightClass'><td>$($group.DisplayName)</td><td>$descriptionText</td><td>$($group.MemberCount)</td><td>$ownerDisplay</td><td>$dynamicBadge</td><td>$activityBadge</td><td>$([datetime]::Parse($group.CreatedDateTime).ToString('yyyy-MM-dd'))</td></tr>"
        }
        $m365GroupsContent += "</table>"
    }
    
    # SECURITY GROUPS TAB CONTENT
    $securityGroups = $allGroups | Where-Object { $_.GroupType -eq "Security" -or $_.GroupType -eq "Mail-Enabled Security" } | Sort-Object {[int]$_.MemberCount} -Descending
    $securityGroupsContent = "<h3>Security Groups Summary</h3>"
    $securityGroupsContent += "<div class='stats-grid'>"
    $securityGroupsContent += "<div class='stat-card'><strong>Total Security Groups:</strong> $($securityGroups.Count)</div>"
    $securityGroupsContent += "<div class='stat-card'><strong>Mail-Enabled Security:</strong> $(($securityGroups | Where-Object { $_.GroupType -eq 'Mail-Enabled Security' }).Count)</div>"
    $securityGroupsContent += "<div class='stat-card'><strong>Role-Assignable:</strong> $(($securityGroups | Where-Object { $_.IsAssignableToRole -eq 'True' }).Count)</div>"
    $securityGroupsContent += "<div class='stat-card'><strong>Dynamic Security Groups:</strong> $(($securityGroups | Where-Object { $_.IsDynamic -eq 'True' }).Count)</div>"
    $securityGroupsContent += "</div>"
    
    if ($securityGroups) {
        $securityGroupsContent += @"
        <h3>Security Groups Details</h3>
        <div class="filter-controls">
            <label for="select-security">Show:</label>
            <select id="select-security" class="group-filter" data-table="table-security" onchange="filterTable('table-security', 'select-security')">
                <option value="10">Top 10</option>
                <option value="50" selected>Top 50</option>
                <option value="100">Top 100</option>
                <option value="all">All</option>
            </select>
            <span id="info-security" class="info-text"></span>
        </div>
        <table id="table-security"><tr><th>Group Name</th><th>Type</th><th>Members</th><th>Role-Assignable</th><th>Dynamic</th><th>On-Prem Synced</th><th>Created</th></tr>
"@
        
        foreach ($group in $securityGroups) {
            $roleAssignableBadge = if($group.IsAssignableToRole -eq 'True') { '<span class="badge badge-privileged">Yes</span>' } else { 'No' }
            $dynamicBadge = if($group.IsDynamic -eq 'True') { '<span class="badge badge-dynamic">Dynamic</span>' } else { 'Static' }
            $onPremSync = if($group.OnPremisesSyncEnabled -eq 'True') { 'Yes' } else { 'No' }
            $securityGroupsContent += "<tr><td>$($group.DisplayName)</td><td><span class='badge badge-security'>$($group.GroupType)</span></td><td>$($group.MemberCount)</td><td>$roleAssignableBadge</td><td>$dynamicBadge</td><td>$onPremSync</td><td>$([datetime]::Parse($group.CreatedDateTime).ToString('yyyy-MM-dd'))</td></tr>"
        }
        $securityGroupsContent += "</table>"
    }
    
    # PRIVILEGED GROUPS TAB CONTENT
    $privilegedGroupsContent = "<h3>Privileged Groups Analysis</h3>"
    
    # Check for privileged groups report
    $privilegedGroupsPath = Join-Path $AssessmentFolder "PrivilegedGroups.csv"
    if (Test-Path $privilegedGroupsPath) {
        $privilegedGroups = Import-Csv $privilegedGroupsPath
        
        $privilegedGroupsContent += "<div class='stats-grid'>"
        $privilegedGroupsContent += "<div class='stat-card'><strong>Total Privileged Groups:</strong> $($privilegedGroups.Count)</div>"
        $privilegedGroupsContent += "<div class='stat-card'><strong>Groups with Role Assignments:</strong> $(($privilegedGroups | Where-Object { $_.AssignedRole -ne 'None (Role-Assignable)' }).Count)</div>"
        $privilegedGroupsContent += "<div class='stat-card'><strong>Total Members in Privileged Groups:</strong> $(($privilegedGroups | Measure-Object -Property MemberCount -Sum).Sum)</div>"
        $privilegedGroupsContent += "</div>"
        
        $privilegedGroupsContent += "<h3>Privileged Groups Details</h3>"
        $privilegedGroupsContent += "<table><tr><th>Group Name</th><th>Assigned Role</th><th>Member Count</th><th>Role-Assignable</th><th>Created</th></tr>"
        
        foreach ($group in $privilegedGroups) {
            $roleDisplay = if($group.AssignedRole -ne 'None (Role-Assignable)') { "<span class='badge badge-privileged'>$($group.AssignedRole)</span>" } else { $group.AssignedRole }
            $roleAssignable = if($group.IsRoleAssignable) { 'Yes' } else { 'No' }
            $privilegedGroupsContent += "<tr><td>$($group.GroupName)</td><td>$roleDisplay</td><td><strong>$($group.MemberCount)</strong></td><td>$roleAssignable</td><td>$([datetime]::Parse($group.CreatedDateTime).ToString('yyyy-MM-dd'))</td></tr>"
        }
        $privilegedGroupsContent += "</table>"
    } else {
        # Fallback to role-assignable groups from main data
        $roleAssignableGroups = $allGroups | Where-Object { $_.IsAssignableToRole -eq 'True' }
        
        $privilegedGroupsContent += "<div class='stats-grid'>"
        $privilegedGroupsContent += "<div class='stat-card'><strong>Role-Assignable Groups:</strong> $($roleAssignableGroups.Count)</div>"
        $privilegedGroupsContent += "</div>"
        
        if ($roleAssignableGroups) {
            $privilegedGroupsContent += "<h3>Role-Assignable Groups</h3>"
            $privilegedGroupsContent += "<table><tr><th>Group Name</th><th>Type</th><th>Members</th><th>Owners</th><th>Created</th></tr>"
            
            foreach ($group in $roleAssignableGroups) {
                $privilegedGroupsContent += "<tr><td>$($group.DisplayName)</td><td><span class='badge badge-security'>$($group.GroupType)</span></td><td>$($group.MemberCount)</td><td>$($group.OwnerCount)</td><td>$([datetime]::Parse($group.CreatedDateTime).ToString('yyyy-MM-dd'))</td></tr>"
            }
            $privilegedGroupsContent += "</table>"
        }
    }
    
    # ISSUES TAB CONTENT (Updated with activity recommendations)
    $issuesContent = "<h3>Issues and Recommendations</h3>"
    
    # Add inactive groups section if available
    if ($groupsRequiringAction) {
        $issuesContent += @"
        <h4 class='error'>Inactive Groups ($($groupsRequiringAction.Count))</h4>
        <p>These groups have shown no activity and should be reviewed:</p>
        <table><tr><th>Group Name</th><th>Type</th><th>Days Inactive</th><th>Action</th></tr>
"@
        foreach ($group in ($groupsRequiringAction | Select-Object -First 10)) {
            $issuesContent += "<tr class='inactive-row'><td>$($group.GroupName)</td><td>$($group.GroupType)</td><td><strong>$($group.DaysSinceLastActivity)</strong></td><td>$($group.RecommendedAction)</td></tr>"
        }
        $issuesContent += "</table>"
    }
    
    # Empty Groups
    $emptyGroupsPath = Join-Path $AssessmentFolder "EmptyGroups.csv"
    if (Test-Path $emptyGroupsPath) {
        $emptyGroups = Import-Csv $emptyGroupsPath
        if ($emptyGroups) {
            $issuesContent += @"
            <h4 class='error'>Empty Groups ($($emptyGroups.Count))</h4>
            <p>These groups have no members and should be reviewed for deletion:</p>
            <div class="filter-controls">
                <label for="select-empty">Show:</label>
                <select id="select-empty" class="group-filter" data-table="table-empty" onchange="filterTable('table-empty', 'select-empty')">
                    <option value="10">Top 10</option>
                    <option value="20" selected>Top 20</option>
                    <option value="50">Top 50</option>
                    <option value="all">All</option>
                </select>
                <span id="info-empty" class="info-text"></span>
            </div>
            <table id="table-empty"><tr><th>Group Name</th><th>Type</th><th>Created</th><th>Days Since Creation</th></tr>
"@
            foreach ($group in $emptyGroups) {
                $issuesContent += "<tr><td>$($group.GroupName)</td><td>$($group.GroupType)</td><td>$($group.CreatedDateTime)</td><td>$($group.DaysSinceCreation)</td></tr>"
            }
            $issuesContent += "</table>"
        }
    }
    
    # Orphaned Groups
    $orphanedGroupsPath = Join-Path $AssessmentFolder "OrphanedGroups.csv"
    if (Test-Path $orphanedGroupsPath) {
        $orphanedGroups = Import-Csv $orphanedGroupsPath
        if ($orphanedGroups) {
            $issuesContent += @"
            <h4 class='warning'>Orphaned Groups ($($orphanedGroups.Count))</h4>
            <p>These groups have no owners and need ownership assignment:</p>
            <div class="filter-controls">
                <label for="select-orphaned">Show:</label>
                <select id="select-orphaned" class="group-filter" data-table="table-orphaned" onchange="filterTable('table-orphaned', 'select-orphaned')">
                    <option value="10">Top 10</option>
                    <option value="20" selected>Top 20</option>
                    <option value="50">Top 50</option>
                    <option value="all">All</option>
                </select>
                <span id="info-orphaned" class="info-text"></span>
            </div>
            <table id="table-orphaned"><tr><th>Group Name</th><th>Type</th><th>Member Count</th><th>Created</th></tr>
"@
            foreach ($group in $orphanedGroups) {
                $issuesContent += "<tr><td>$($group.GroupName)</td><td>$($group.GroupType)</td><td>$($group.MemberCount)</td><td>$($group.CreatedDateTime)</td></tr>"
            }
            $issuesContent += "</table>"
        }
    }
    
    # Groups with Guests
    $guestsPath = Join-Path $AssessmentFolder "GroupsWithGuests.csv"
    if (Test-Path $guestsPath) {
        $groupsWithGuests = Import-Csv $guestsPath
        if ($groupsWithGuests) {
            $issuesContent += "<h4>Groups with Guest Users ($($groupsWithGuests.Count))</h4>"
            $issuesContent += "<p>These groups contain external guest users:</p>"
            $issuesContent += "<table><tr><th>Group Name</th><th>Type</th><th>Total Members</th><th>Guest Count</th><th>Guest %</th></tr>"
            foreach ($group in $groupsWithGuests) {
                $issuesContent += "<tr><td>$($group.GroupName)</td><td>$($group.GroupType)</td><td>$($group.TotalMembers)</td><td>$($group.GuestCount)</td><td>$($group.GuestPercentage)%</td></tr>"
            }
            $issuesContent += "</table>"
        }
    }
    
    # Enhanced Recommendations
    $issuesContent += @"
    <h3>Recommendations</h3>
    <div class='summary-card'>
        <ul>
            <li><strong>Inactive Groups:</strong> Review and archive/delete groups with no activity in the last $($activityStats.InactivityThresholdDays) days</li>
            <li><strong>Empty Groups:</strong> Delete groups with no members to reduce clutter</li>
            <li><strong>Orphaned Groups:</strong> Assign owners to all groups to ensure proper governance</li>
            <li><strong>Group Descriptions:</strong> Add meaningful descriptions to all groups for better documentation</li>
            <li><strong>Large Groups:</strong> Review groups with over 1000 members for performance optimization</li>
            <li><strong>Guest Access:</strong> Regularly audit groups with guest users for security compliance</li>
            <li><strong>Privileged Groups:</strong> Implement PIM (Privileged Identity Management) for role-assignable groups</li>
            <li><strong>Naming Convention:</strong> Implement a consistent naming convention for all group types</li>
            <li><strong>Regular Reviews:</strong> Schedule quarterly reviews of group activity and membership</li>
        </ul>
    </div>
"@
    
    # Generate final HTML
    $html = $htmlTemplate -replace "{{SUMMARY_CONTENT}}", $summaryContent
    $html = $html -replace "{{KEY_FINDINGS}}", $keyFindings
    $html = $html -replace "{{OVERVIEW_CONTENT}}", $overviewContent
    $html = $html -replace "{{ACTIVITY_CONTENT}}", $activityContent
    $html = $html -replace "{{M365_GROUPS_CONTENT}}", $m365GroupsContent
    $html = $html -replace "{{SECURITY_GROUPS_CONTENT}}", $securityGroupsContent
    $html = $html -replace "{{PRIVILEGED_GROUPS_CONTENT}}", $privilegedGroupsContent
    $html = $html -replace "{{ISSUES_CONTENT}}", $issuesContent
    
    # Save HTML file
    $html | Out-File -FilePath $OutputFile -Encoding UTF8
    
    Write-Host "Enhanced HTML report generated successfully: $OutputFile" -ForegroundColor Green
    Write-Host "Report includes activity analysis data" -ForegroundColor Cyan
    
    # Open in default browser
    Start-Process $OutputFile
}
catch {
    Write-Host "Error generating HTML report: $_" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
}